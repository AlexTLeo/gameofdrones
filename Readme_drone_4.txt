# AUTHORS
  
  The authors of Drone4 project are Contorno Simone (mat. 4638263) 
  and Russo Gabriele (mat. 5180813)

# INTRODUCTION

  The Drone_4 is the fifth drone of the fleet of drones which
  compose the GameOfDrones project. Its aim is to explore 
  autonomously a rectangular area (the map) consuming power and
  avoiding the other drones thanks to the master process.
  
# HOW IT WORKS

### LOG FILES

    In this project there are two log files :
    
    * InfoLog : Contains all the drone state information (e.g. the
    		 drone is running, refueling etc...) and also
    		 communication information with the master process.
    		 
    * ErrorLog : Contains all the error information about the 
    		  communication between the drone 4 process and the
    		  Master process.
    		  
### COMMUNICATION WITH MASTER PROCESS

    The comunication with the master process takes place through socket.
    Each drones have its specific port number and one hostname, this data 
    are contained in the include file "values.h", so firstly drone_4 takes 
    its port number and the hostname from values.h, and then it creates a
    socket connection with the master process (seen as a server).

### DRONE TRAJECTORY

    The trajectory generated by the drone is composed by two elements :
    
    * Steps : Takes into account the number of total steps to take.
    
    * Direction : random directions ( 0 = Up, 1 = Up and Left, 2 = Left,
    	          3 = Down and Left, 4 = Down, 5 = Down and Right, 6 = Right,
    	          7 = Up and Right )
    
    The direction and steps are generated randomly using the "mix" function
    that is an Hush function.
             
### DRONE POSITION

    Firstly the drone takes the starting position from values.h, the starting
    position (initial coordinate x and y) is contained in the vector START4[2],
    lastly it calculates the next position using the "next position" function
    that increase x or y, or both (depending on the random direction).
    Then the new coordinates are sent to the master process that will check if
    there will be a collision with another drone in that new position.
    Indeed, the drone, before moving will check the response of the master process.
    If the master process response is MASTER_OK, the movement of the drone is
    allowed and then the new position is confirmed, whereas if the master process
    response is MASTER_COL, the movement of the drone is not allowed and then the
    new position is not confirmed.
    
### DRONE POWER 

    The evaluation of the next position is done only in the case that the power
    of the drone is grater than zero.
    Whenever the master process allow a drone movement, the drone power is decrease by 1.
    Instead if the drone power is zero, it needs to be recharged, so the drone is stopped
    until it has enough power to go on.
